


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunTCB      ; currently running
                                                             thread
   14 00000000                 EXTERN           OS_cycles   ; Number of OS cycl
                                                            es since launch
   15 00000000                 EXTERN           OS_scheduler
   16 00000000         
   17 00000000                 EXPORT           StartOS
   18 00000000                 EXPORT           ContextSwitch
   19 00000000                 EXPORT           PendSV_Handler
   20 00000000         
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000         
   29 00000000         
   30 00000000         StartOS



ARM Macro Assembler    Page 2 


   31 00000000 B672            CPSID            I           ;Shouldn't be calle
                                                            d with interrupts e
                                                            nabled, but saftey
   32 00000002 F7FF FFFE       BL               OS_scheduler
   33 00000006 4812            LDR              R0, =RunTCB
   34 00000008 6801            LDR              R1, [R0]
   35 0000000A F8D1 D000       LDR              SP, [R1]
   36 0000000E E8BD 0FF0       POP              {R4-R11}
   37 00000012 BC0F            POP              {R0-R3}
   38 00000014 F85D CB04       POP              {R12}
   39 00000018 F85D EB04       POP              {LR}
   40 0000001C B662            CPSIE            I
   41 0000001E         
   42 0000001E 4770            BX               LR          ; start first threa
                                                            d
   43 00000020         
   44 00000020         OSStartHang
   45 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
   46 00000022         
   47 00000022         
   48 00000022         ;*******************************************************
                       *************************************************
   49 00000022         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   50 00000022         ;                                           void Context
                       Switch(void)
   51 00000022         ;
   52 00000022         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   53 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   54 00000022         ;*******************************************************
                       *************************************************
   55 00000022         
   56 00000022         ContextSwitch
   57 00000022         ; edit this code
   58 00000022 480C            LDR              R0, =NVIC_INT_CTRL
   59 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   60 00000028 6001            STR              R1, [R0]
   61 0000002A 4770            BX               LR
   62 0000002C         
   63 0000002C         
   64 0000002C         ;*******************************************************
                       *************************************************
   65 0000002C         ;                                         HANDLE PendSV 
                       EXCEPTION
   66 0000002C         ;                                     void OS_CPU_PendSV
                       Handler(void)
   67 0000002C         ;
   68 0000002C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   69 0000002C         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   70 0000002C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   71 0000002C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   72 0000002C         ;              this way means that context saving and re



ARM Macro Assembler    Page 3 


                       storing is identical whether it is initiated from
   73 0000002C         ;              a thread or occurs due to an interrupt or
                        exception.
   74 0000002C         ;
   75 0000002C         ;           2) Pseudo-code is:
   76 0000002C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   77 0000002C         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   78 0000002C         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   79 0000002C         ;              d) Call OSTaskSwHook();
   80 0000002C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   81 0000002C         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   82 0000002C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   83 0000002C         ;              h) Restore R4-R11 from new process stack;
                       
   84 0000002C         ;              i) Perform exception return which will re
                       store remaining context.
   85 0000002C         ;
   86 0000002C         ;           3) On entry into PendSV handler:
   87 0000002C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   88 0000002C         ;                 xPSR, PC, LR, R12, R0-R3
   89 0000002C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   90 0000002C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   91 0000002C         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
   92 0000002C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
   93 0000002C         ;
   94 0000002C         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
   95 0000002C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
   96 0000002C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
   97 0000002C         ;*******************************************************
                       *************************************************
   98 0000002C         
   99 0000002C         PendSV_Handler
  100 0000002C         ; put your code here
  101 0000002C B672            CPSID            I           ; Make atomic
  102 0000002E E92D 0FF0       PUSH             {R4-R11}
  103 00000032 4C07            LDR              R4, =RunTCB ; R4 is pointer to 
                                                            RunTCB
  104 00000034 6821            LDR              R1, [R4]    ; R1 is RunTCB
  105 00000036 F8C1 D000       STR              SP, [R1]    ; Save SP into TCB
  106 0000003A 4675            MOV              R5, LR
  107 0000003C         
  108 0000003C F7FF FFFE       BL               OS_scheduler ; Set RunTCB to ne
                                                            xt
  109 00000040 46AE            MOV              LR, R5
  110 00000042 6821            LDR              R1, [R4]    ; Reload RunTCB



ARM Macro Assembler    Page 4 


  111 00000044 F8D1 D000       LDR              SP, [R1]    ; Recover stack poi
                                                            nter
  112 00000048 E8BD 0FF0       POP              {R4-R11}    ; Recover registers
                                                            
  113 0000004C B662            CPSIE            I
  114 0000004E 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  115 00000050         
  116 00000050         
  117 00000050         
  118 00000050                 ALIGN
  119 00000050                 END
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab5 -IC:\Users\Carson\AppData\Loca
l\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA
 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 536" --
predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ S
ETA 1" --list=.\osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000022

Symbol: ContextSwitch
   Definitions
      At line 56 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 44 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 45 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 99 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 58 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 59 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_cycles 00000000

Symbol: OS_cycles
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_cycles unused
OS_scheduler 00000000

Symbol: OS_scheduler
   Definitions
      At line 15 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 32 in file ..\RTOS_Labs_common\osasm.s
      At line 108 in file ..\RTOS_Labs_common\osasm.s

RunTCB 00000000

Symbol: RunTCB
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 33 in file ..\RTOS_Labs_common\osasm.s
      At line 103 in file ..\RTOS_Labs_common\osasm.s

3 symbols
351 symbols in table
